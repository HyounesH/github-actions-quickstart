name: CI workflow


on:
  push:
    branches:
      - main


jobs:
  build-and-tests:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
        
      # Install dependencies
      - name: Install dependencies
        run: npm install
      

      # Build the project
      - name: Build the project
        run: npm run build
      
      # Run Lint
      - name: Run lint
        run: npm run lint
      
      # Run Tests with coverage
      - name: Run Tests with coverage
        run: npm run test:cov -- --coverageDirectory=./coverage
      
      # Upload coverage report to codecov
      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN}}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
  
  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-tests


    steps:
      
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      
      # Get the commit hash
      - name: Get the commit hash
        id: commit
        run: | 
          echo "COMMIT_HASH=$(git rev-parse --short ${{github.sha}})" >> $GITHUB_ENV
          echo "::set-output name=COMMIT_HASH::${{COMMIT_HASH}}"
      
      # Get version from package.json
      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p -e  "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "::set-output name=VERSION::${VERSION}"

      # Build the docker image
      - name: Build the docker image
        run: |
          DOCKER_TAG=${{secrets.DOCKER_REPO}}-${{env.VERSION}}-${{env.COMMIT_HASH}}
          echo "Tagging docker image with tag: $DOCKER_TAG"
          docker build -t $DOCKER_TAG .
      
    
  push-docker-image:
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
      
      # Set up docker hub
      - name: Sign in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      
      # Push docker image to docker hub
      -  name: Push docker image to docker hub
         run: |
            DOCKER_TAG=${{secrets.DOCKER_REPO}}-${{needs.build-docker-image.outputs.VERSION}}-${{needs.build-docker-image.outputs.COMMIT_HASH}}
            echo "Pushing docker image with tag: $DOCKER_TAG"
            docker push $DOCKER_TAG


